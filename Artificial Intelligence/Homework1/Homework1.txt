Benny Tsai
A.I.
Homework 1

3.7)
a. 	Initial State: A blank uncolored map.
	Goal Test: All regions of the map colored, and no adjacent regions have the same color.
	Successor Function: Pick a region, give it a color that its neighbors do not have.
	Cost Function: Unit cost for each coloring.

b.	Initial State: Monkey and two crates on the floor.
	Goal Test: Height of monkey + the crate(s) it's standing on >= height of bananas.
	Successor Function: Stack, move, or climb a crate.
	Cost Function: Unit cost for each action.

c.	Initial State: All records unprocessed.
	Goal Test: Program outputs "illegal input record" message.
	Successor Function: Process a record that hasn't been processed yet.
	Cost Function: Unit cost for processing each record.

d.	Initial State: All jugs are empty.
	Goal Test: Exactly 1 gallon of water left in one or more jugs.
	Successor Function: Fill a jug, empty a jug into the ground or another jug.
	Cost Function: Unit cost for each action.

3.9)
a.	Initial State: Everyone and the boat on the right bank (I like to start from right and go left).
	Goal Test: Everyone who started on the right bank ends up on the left bank, and the boat as well.
	Successor Function: Move 1 or 2 people from the right bank to the left, or move 1 or 2 people from the left bank to the right bank, all via the boat.
	Cost Function: Unit cost for each trip, regardless of how many people are involved in the load/unload action.
	Diagram: See file "Picture1.pdf".

b.	Program: See files "CM.java" and "Node.java" for implementation.
	Yes, it is a good idea to seach for repeated nodes, since in the context of this problem the two identical nodes (in terms of number of each type of people on each bank and location of boat) represents exactly the same state, regardless of how you reached those nodes.  So reaching the same node twice means you've just wasted a good amount of search time, and could lead to non-terminating searching.

c.	The state space looks simple since we're only concerned with legal states.  But when humans try this problem, they cannot tell themselves to mentally generate only legal states; people end up considering nearly all the states possible, therefore making the problem very difficult for themselves.  Also, humans are not very good or very fast at checking for repeated states, making the situation worse.

Comments:	I wrote my program in Java, since that's the language I'm most familiar with.  To run it, "java CM" should do the trick.  I chose depth-first graph-search as my search method in an attempt to minimize the number of nodes expanded.  The legality of a node is checked before it is inserted into the fringe.  So the program will never even consider a node that is illegal.  Illegal in this case just means any node where cannibalism occurs.  The program guarantees that no location will ever have a negative number of people by never moving more people than there are on a bank.

4.1)	Diagram: See file "Picture2.pdf".

	Nodes Considered:
	City Name	f	g	h
	Lugoj		244	0	244
	Mehadia		311	70	241
	Dobreta		387	145	342
	Crainova	425	265	160
	Timisoara	440	111	329
	Pitesti		503	403	100
	Bucharest	504	504	0

6.1)
a.	Without taking symmetry into account, since the math gets a bit crazy when I tried, there are approximately 9! = 362,880 possible games of tic-tac-toe.

b.	See file "Picture3.pdf".

c.	See file "Picture3.pdf".

d.	See file "Picture3.pdf".

e.	See file "Picture3.pdf".